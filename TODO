WRITING:
 - Abstract, preface, acknowledgements
  - Talk about societal impact and sustainability also of the neural network training and compute, 
  maybe this helps(https://www.nature.com/articles/s43588-023-00506-2)
 - Add a mathematical description of the Tucker factorization
 - Update implementation section
 - If we have an accurate mapping between F_wf and U does that mean that we can generalize the fno to any wind speed? could we test it?
 - Add some description of the losses and loss weighting
 - put dataset layout in the appendix
STRUCTURING:
 - Strcuture the value proposition along the two parallel developments:
    - Data-driven surrogate model
    - Fidelity enhancement model 

DEVELOPMENT:
 - Demonstrate the inference speed of the FNO
 - Test on two outputs 
 - Test with another input parameter
 - Fine tune the FNO on a completely different low res example and see how it performs in high res
 - Can I make the network smaller without losing performance
 - Try with a different ambient turbulence
 - Evaluate not only as function of angle but also of layout number, 
 noting that layout is structured in a way that you repeat the 10 layouts at five different spacings,
 you can plt it in a heatmap to show eventual dependencies
 - Apply a dynamic weighting strategy like:
    if dynamic_collocation and epoch >= (start_adapting_at_epoch+epochs_to_make_updates) and include_physics:
      if stored_nn is not None:
          old_outputs = stored_nn(X_phys)
          new_outputs = model(X_phys)
          diff = torch.abs(torch.sum(old_outputs-new_outputs,axis=1))
          # concatenate X_phys and diff
          X_mat = torch.cat((X_phys,diff.unsqueeze(1)),axis=1).detach().numpy()
          n_samples = len(X_phys)
          D = constants["D"] if drop_hub else 0
          X_phys = utils.sample_points(X_mat, n_samples,Normaliser,D=D,grid_size=100)
      stored_nn = copy.deepcopy(model)



OTHER NOTES:
 - To apply in practice, you want to create a surrogate which takes into account the parameters as input